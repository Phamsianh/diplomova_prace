{
  "openapi": "3.0.2",
  "info": {
    "title": "Information System for Supporting Administration Process (ISSAP)",
    "description": "\nISSAP is information system created for supporting administration process.\nIt allows user to create an administration process, define phases and transitions with a form for user to intantiate.\nISSAP also audit all content before user transit instance to the next phase. Audit trail is used for administrative purposes.\n",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "/api"
    },
    {
      "url": "http://localhost:8000/",
      "description": "Development server"
    },
    {
      "url": "http://localhost/api/",
      "description": "Production server"
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login",
        "description": "Get the token for authentication by username and password. Token will expire in 30 day from the moment of receiving.",
        "operationId": "login_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/registration": {
      "post": {
        "summary": "Registration",
        "description": "Registration\n\n* `first_name` is required. Must contain only letter and space\n\n* `last_name` is required. Must contain only letter and space\n\n* `user_name` is required. Must contain only uppercase or lowercase letter, space, number and special character -_!@#$%^&*()?{}\n\n* `password` is required. Must contain at least 8 characters, at least 1 uppercase letter, 1 lower letter, 1 number and can contain special character\n\n* `email` is required. Must follow email naming schema\n\n* `phone` is optional. Must only contain number\n\n* `birthdate` is optional. Must only contain datetime in",
        "operationId": "registration_registration_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Collection",
        "description": "Get all users of the system, default number of users return is 50.",
        "operationId": "get_users_collection_users_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Users Collection Users Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Post Users Resource",
        "description": "Create a user.\nThe request body for creating a new user is as follow\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``first_name`` | string | required | First name of the user |\n| ``last_name`` | string | required | Last name of the user |\n| ``user_name`` | string | required | Username used to login to the system. Must contain only uppercase or lowercase letter, space, number and special character -_!@#$%^&*()?{} |\n| ``password`` | string | required | password used to authenticate userpassword must contain at least 8 characters, at least 1 uppercase letter, 1 lower letter, 1 number and can contain special character |\n| ``email`` | string | required | Email of the user. Must follow email naming schema |\n| ``phone`` | integer | optional | Phone number of the user |\n| ``birthdate`` | string | optional | Birthdate of the user. Giving in format YYYY-mm-dd |",
        "operationId": "post_users_resource_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/length": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Collection Length",
        "operationId": "get_users_collection_length_users_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Users Collection Length Users Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Instance",
        "description": "Get the user instance.",
        "operationId": "get_users_instance_users__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete Users Resource Instance",
        "description": "User resource cannot be deleted.",
        "operationId": "delete_users_resource_instance_users__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patch Users Resource Instance",
        "description": "Update a user.\nRequest body for updating user is as follow\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``first_name`` | string | optional | First name of the user |\n| ``last_name`` | string | optional | Last name of the user |\n| ``password`` | string | optional | password used to authenticate user. password must contain at least 8 characters, at least 1 uppercase letter, 1 lower letter, 1 number and can contain special character |\n| ``email`` | string | optional | Email of the user. Must follow email naming schema |\n| ``phone`` | integer | optional | Phone number of the user |\n| ``birthdate`` | string | optional | Birthdate of the user. Giving in format YYYY-mm-dd |",
        "operationId": "patch_users_resource_instance_users__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/users_positions": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Users Positions",
        "description": "Get all users_positions of authenticated user.",
        "operationId": "get_users_users_positions_users__rsc_id__users_positions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/created_forms": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Created Forms",
        "description": "Get all forms created by the authenticated user.",
        "operationId": "get_users_created_forms_users__rsc_id__created_forms_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/created_instances": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Created Instances",
        "description": "Get all instances created by the authenticated user.",
        "operationId": "get_users_created_instances_users__rsc_id__created_instances_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/directors": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Directors",
        "description": "Get all directors specified for the authenticated user.",
        "operationId": "get_users_directors_users__rsc_id__directors_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/receivers": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Receivers",
        "description": "Get all receivers specified for the authenticated user.",
        "operationId": "get_users_receivers_users__rsc_id__receivers_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/held_positions": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Held Positions",
        "description": "Get all positions held by the user.",
        "operationId": "get_users_held_positions_users__rsc_id__held_positions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/joined_group": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Joined Group",
        "operationId": "get_users_joined_group_users__rsc_id__joined_group_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/held_roles": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Held Roles",
        "description": "Get all  positions held by the user.",
        "operationId": "get_users_held_roles_users__rsc_id__held_roles_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/participated_instances": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Participated Instances",
        "description": "Get all instances participated by the user.",
        "operationId": "get_users_participated_instances_users__rsc_id__participated_instances_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/pending_instances": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Pending Instances",
        "description": "Get all instances, which are pending for the user to receive or to redirect.",
        "operationId": "get_users_pending_instances_users__rsc_id__pending_instances_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{rsc_id}/potential_instances": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users Potential Instances",
        "description": "Get all instances, which are potential for the user to receive or to redirect.",
        "operationId": "get_users_potential_instances_users__rsc_id__potential_instances_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Collection",
        "description": "Get all the public forms in the system.",
        "operationId": "get_forms_collection_forms_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Forms Collection Forms Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "forms"
        ],
        "summary": "Post Forms Resource",
        "description": "Create a form.\n        The form created doesn't have any form component, e.g. phase, transition, section or field.\n        To create these component please refer to the Post Resource Collection endpoint type of correspond resource.\n        \n\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | required | The name of the form. |",
        "operationId": "post_forms_resource_forms_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/length": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Collection Length",
        "operationId": "get_forms_collection_length_forms_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Forms Collection Length Forms Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{rsc_id}": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Instance",
        "description": "Get form from id.",
        "operationId": "get_forms_instance_forms__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "forms"
        ],
        "summary": "Delete Forms Resource Instance",
        "description": "The form can only be deleted if it is private.",
        "operationId": "delete_forms_resource_instance_forms__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "forms"
        ],
        "summary": "Patch Forms Resource Instance",
        "description": "Constraint when public a form:\n\n* Only 1 begin phase and 1 end phase.\n* Each phase must at least has 1 section, each section must at least has 1 field.\n\n*Note: public form cannot change to private.*\n\nConstraint when deprecate a form:\n\n* Form must be public.\n\n*Note: obsolete form cannot change to be not obsolete.*\n        \n\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | optional | The name of the form. |\n| ``public`` | boolean | optional | The public state of the form. Set to ``true`` to public the form. Only public form can be instantiated. Private form cannot be searched. Public form cannot be update or delete. |\n| ``obsolete`` | boolean | optional | The obsolete state of the form. Set to ``true`` to deprecate the form. Only public form can be deprecated. Obsolete form can be searched. Obsolete form cannot be instantiated. Obsolete form cannot be updated or deleted. |",
        "operationId": "patch_forms_resource_instance_forms__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{rsc_id}/creator": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Creator",
        "description": "Get creator of the form.",
        "operationId": "get_forms_creator_forms__rsc_id__creator_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{rsc_id}/phases": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Phases",
        "description": "Get all phases of the form.",
        "operationId": "get_forms_phases_forms__rsc_id__phases_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{rsc_id}/transitions": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Transitions",
        "description": "Get all transitions of the form.",
        "operationId": "get_forms_transitions_forms__rsc_id__transitions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{rsc_id}/sections": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Sections",
        "description": "Get all sections of the form.",
        "operationId": "get_forms_sections_forms__rsc_id__sections_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{rsc_id}/fields": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Fields",
        "description": "Get all fields of the form.",
        "operationId": "get_forms_fields_forms__rsc_id__fields_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{rsc_id}/instances": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Instances",
        "description": "Get all instances instantiated from the form.\n\nConstraint:\n\n* Only admin can get the information of all instances, which are instantiated from this form.",
        "operationId": "get_forms_instances_forms__rsc_id__instances_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{rsc_id}/positions": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Positions",
        "description": "Get all positions, either designated for a phases or assigned for handle sections of the form.",
        "operationId": "get_forms_positions_forms__rsc_id__positions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{rsc_id}/available_positions": {
      "get": {
        "tags": [
          "forms"
        ],
        "summary": "Get Forms Available Positions",
        "description": "Get all positions, either designated for a phases or assigned for handling sections of the form.\nThis endpoint is an alias for Get Forms Positions endpoint.",
        "operationId": "get_forms_available_positions_forms__rsc_id__available_positions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Collection",
        "description": "Get all sections in the system.",
        "operationId": "get_sections_collection_sections_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Sections Collection Sections Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SectionResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "sections"
        ],
        "summary": "Post Sections Resource",
        "description": "To create section for a phase\n\n* Current user must be phase's owner.\n* The form, which this phase belongs to, must not be public or obsolete.\n        \nThe request body for creating a section is as follow\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | required | The name of the section |\n| ``phase_id`` | integer | required | The id of the phase, which contains this section |\n| ``position_id`` | integer | required | The id of position assigned for handling this section |\n| ``order`` | integer | optional | The order of the section in the form or instance. |",
        "operationId": "post_sections_resource_sections_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SectionPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections/length": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Collection Length",
        "operationId": "get_sections_collection_length_sections_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Sections Collection Length Sections Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections/{rsc_id}": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Instance",
        "description": "Get a section by id.",
        "operationId": "get_sections_instance_sections__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "sections"
        ],
        "summary": "Delete Sections Resource Instance",
        "description": "To delete form's component (phase, section, field):\n\n* Form must not be public or obsolete\n\n*Note: delete form's component also delete it's subcomponent*",
        "operationId": "delete_sections_resource_instance_sections__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "sections"
        ],
        "summary": "Patch Sections Resource Instance",
        "description": "Constraint when update a section:\n\n* Current user must be phase's owner.\n* ``name``, ``phase_id`` and ``position_id`` can only be changed when form is currently private.\n* ``phase_id`` must belong to the same form as the old phase id.\n        \nThe request body for updating the section is follow\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | optional | The name of the section. |\n| ``phase_id`` | integer | optional | The id of the phase, which contains the section.The new phase must be in the same form of the old phase. |\n| ``position_id`` | integer | optional | The id of position assigned for handling this section. |\n| ``order`` | integer | optional | The order of the section, which is used to arrange the order of the section in the form or instance. |",
        "operationId": "patch_sections_resource_instance_sections__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SectionPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections/{rsc_id}/creator": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Creator",
        "description": "Get creator of the section, eventually the form.",
        "operationId": "get_sections_creator_sections__rsc_id__creator_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections/{rsc_id}/form": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Form",
        "description": "Get the form, which contains the section.",
        "operationId": "get_sections_form_sections__rsc_id__form_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections/{rsc_id}/phase": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Phase",
        "description": "Get the phase, which contains the section.",
        "operationId": "get_sections_phase_sections__rsc_id__phase_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections/{rsc_id}/position": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Position",
        "description": "Get the position assigned for the section.",
        "operationId": "get_sections_position_sections__rsc_id__position_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections/{rsc_id}/fields": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Fields",
        "description": "Get all fields contained in the section.",
        "operationId": "get_sections_fields_sections__rsc_id__fields_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections/{rsc_id}/potential_handlers": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Potential Handlers",
        "description": "Get all potential handlers of the section.\nPotential handlers of a section is users, who have positions, which is assigned for handling this section.",
        "operationId": "get_sections_potential_handlers_sections__rsc_id__potential_handlers_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sections/{rsc_id}/potential_receivers": {
      "get": {
        "tags": [
          "sections"
        ],
        "summary": "Get Sections Potential Receivers",
        "description": "Get all potential receivers of the section.\nPotential receivers of a section is users, who have positions, which is assigned for handling this section.",
        "operationId": "get_sections_potential_receivers_sections__rsc_id__potential_receivers_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/fields": {
      "get": {
        "tags": [
          "fields"
        ],
        "summary": "Get Fields Collection",
        "description": "Get all fields in the system.",
        "operationId": "get_fields_collection_fields_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Fields Collection Fields Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "fields"
        ],
        "summary": "Post Fields Resource",
        "description": "Create a field.\n\nConstraint:\n\n* Current user must be section's owner.\n* The form, which this section belongs to, must not be public or obsolete.\n        \nThe request body for creating field is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | required | The name of the field. |\n| ``section_id`` | integer | required | The id of the section containing the field. |\n| ``order`` | integer | optional | The order of the field in the section. |",
        "operationId": "post_fields_resource_fields_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/fields/length": {
      "get": {
        "tags": [
          "fields"
        ],
        "summary": "Get Fields Collection Length",
        "operationId": "get_fields_collection_length_fields_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Fields Collection Length Fields Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/fields/{rsc_id}": {
      "get": {
        "tags": [
          "fields"
        ],
        "summary": "Get Fields Instance",
        "description": "Get the field by id.",
        "operationId": "get_fields_instance_fields__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "fields"
        ],
        "summary": "Delete Fields Resource Instance",
        "description": "Delete a field.\n\nConstraint:\n\n* Only creator of the field can delete this field.\n* Field of public or obsolete form cannot be deleted.",
        "operationId": "delete_fields_resource_instance_fields__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "fields"
        ],
        "summary": "Patch Fields Resource Instance",
        "description": "Update the field.\n\nConstraint:\n\n* Current user must be section's owner.\n* ``name`` and ``section_id`` can only be updated when the form, which contains this field is private.\n* ``section_id`` must belong to the same form as the old section id.\n\nThe request body for updating field is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | optional | The name of the field |\n| ``section_id`` | integer | optional | The id of the section containing the field. |\n| ``order`` | integer | optional | The order of the field in the section. |",
        "operationId": "patch_fields_resource_instance_fields__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Collection",
        "description": "Get all instances in the system.\n\nConstraint:\n\n* Only admin can get all instance of the system.",
        "operationId": "get_instances_collection_instances_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Instances Collection Instances Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstanceResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Post Instances Resource",
        "description": "To instantiate instance from a form and initialize the correspond administration process:\n\n* The form must not be public or obsolete.\n* Current authenticated user must have position designated for redirect the begin phase of the form.\n\nInstance initialization includes:\n\n* Set the ``current_phase_id`` of this instance to begin phase id.\n* Create contents of begin fields, which are assigned for only authenticated user's position, with default value of an empty string. \nAn empty string is necessary for hashing the corespond envelope.\n* Set authenticated user to become the director of current phase.\n* Set authenticated user to become the handler of only sections assigned for authenticated user's position.\n\nThe request body for creating an instance is follow\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``form_id`` | integer | required | The id of the form, from which the instance is instantiated. |",
        "operationId": "post_instances_resource_instances_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstancePostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/length": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Collection Length",
        "operationId": "get_instances_collection_length_instances_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Instances Collection Length Instances Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Instance",
        "description": "Get the instance's information by id.\n\nConstraint:\n\n* Only participant of the instance can get the instance's information.",
        "operationId": "get_instances_instance_instances__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "summary": "Delete Instances Resource Instance",
        "description": "Delete an instance.\n\nConstraint:\n\n* Authenticated user must be the owner of the form.\n* Instance can only be delete at begin phase without any commit.",
        "operationId": "delete_instances_resource_instance_instances__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "instances"
        ],
        "summary": "Patch Instances Resource Instance",
        "description": "Authenticated user, which is:\n\n* Director of the current phase can transit instance to next phase.\n* Receiver of the current phase can handle(receive) instance.\n* Director of the end phase can mark the instance as 'done' to indicate the instance is completely handled.\n---\n\n# To transit instance:\n\n## Constraints:\n\n* User must be director of current phase.\n* Requested next phase must be 1 of available next phases.\n* Director must specify:\n\n    * Who is director for next phase.\n    * Director of next phase must be a potential director of next phase.\n\n    * Who is receiver for each section of next phase.\n    * Each user specified for each section must be potential handler of that section.\n    * Then this section can only handled by specified user.\n*Note: director and and receivers can be different*\n\n## Transit instance include:\n\n* Instance of current phase is committed.\n* Change current phase of instance to requested next phase.\n* Set user with ``id`` specified in ``director_id`` to be the director.\n* Set users with ``id`` specified in ``receivers`` object to the receivers of sections of the next phase.\n\n# To handle instance:\n\n## Constraints:\n\n* Only if user is receiver of instance at current phase.\nThen all receiver's instance fields (contents) are auto created.\n\n## Handle instance include:\n\n* Auto created all receiver's instance fields (contents).\n* Mark the ``received`` in receivers resource as ``true``.\n\n*Note: The content cannot be manually created.*\n\n# To mark the instance as done:\n\n## Constraints:\n\n* Only the director of the end phase can mark the instance as 'done'.\n* The instance at state done cannot be modified.\n\n---\n\n\nRequest body for updating the instance must follow schema:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``transit`` |  | optional | Object for specified information when transit an instance. Please refer to InstanceTransit schema |\n| ``handle`` | boolean | optional | Set this field to true if authenticated user is the handler(receiver) of the next phase |\n| ``done`` | boolean | optional | The state of the instance when it is complete handle and reach the end phase. Mark this field to true to change the state of the instance to done.The instance at state 'done' cannot be modified. |\nInstanceTransit object schema:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``current_phase_id`` | integer | required | The id of next phase. |\n| ``receivers`` | object | optional | An object, which contains key as the id of section of next phase, value as the id of user, who is the handler(reciever) of section for the next phase. For example: {'1': 2} mean specified the section with id 1 will be handled by the user with id 2. |\n| ``director_id`` | integer | optional | Id of the user, who will be director of the next phase. |\n| ``message`` | string | optional | The message for the commit in commit history. |",
        "operationId": "patch_instances_resource_instance_instances__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstancePatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/creator": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Creator",
        "description": "Get creator of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its creator.",
        "operationId": "get_instances_creator_instances__rsc_id__creator_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/instances_fields": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Instances Fields",
        "description": "Get all contents(s) of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its the contents.",
        "operationId": "get_instances_instances_fields_instances__rsc_id__instances_fields_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/directors": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Directors",
        "description": "Get all directors of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its directors.",
        "operationId": "get_instances_directors_instances__rsc_id__directors_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/receivers": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Receivers",
        "description": "Get all receivers of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its receivers.",
        "operationId": "get_instances_receivers_instances__rsc_id__receivers_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/participants": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Participants",
        "description": "Get all current participants of the instance. \nParticipants include all directors and receivers of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its participants.",
        "operationId": "get_instances_participants_instances__rsc_id__participants_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/participated_users": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Participated Users",
        "description": "Get all participated users of the instance.\nParticipated users include all users who've already became a creator of at least one of the envelope of the instance.\nThat is, the user must be the last handler, who editted the content and the director must transit the instance to the next phase to create a commit.\nThe system will create the envelope with the creator_id of the user, who is the last editor of the content.\n\nConstraint:\n\n* Only participants of the instance can retrieve its participants.",
        "operationId": "get_instances_participated_users_instances__rsc_id__participated_users_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/commits": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Commits",
        "description": "Get all commits of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its commits.",
        "operationId": "get_instances_commits_instances__rsc_id__commits_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/current_director": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Current Director",
        "description": "Get current director of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its current director.",
        "operationId": "get_instances_current_director_instances__rsc_id__current_director_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/current_receivers": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Current Receivers",
        "description": "Get all current receivers of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its current receivers.",
        "operationId": "get_instances_current_receivers_instances__rsc_id__current_receivers_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/current_director_user": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Current Director User",
        "description": "Get user, who is current director of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its user, who is the current director.",
        "operationId": "get_instances_current_director_user_instances__rsc_id__current_director_user_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{rsc_id}/current_receivers_users": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Get Instances Current Receivers Users",
        "description": "Get all users, who is current receivers of the instance.\n\nConstraint:\n\n* Only participants of the instance can retrieve its users, who is the current receivers.",
        "operationId": "get_instances_current_receivers_users_instances__rsc_id__current_receivers_users_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances_fields": {
      "get": {
        "tags": [
          "instances_fields"
        ],
        "summary": "Get Instances Fields Collection",
        "description": "Contents can only be retrieved through endpoint Get Instances Instances Fields.\n\nFor development process, this constraint is disable.",
        "operationId": "get_instances_fields_collection_instances_fields_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Instances Fields Collection Instances Fields Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstanceFieldResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "instances_fields"
        ],
        "summary": "Post Instances Fields Resource",
        "description": "The content (instance field) cannot be created manually.\nThe content is auto created when handler receives the instance.\nPlease refer to the endpoint Patch Instances Resource Instance.\n\n\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |",
        "operationId": "post_instances_fields_resource_instances_fields_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceFieldPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceFieldResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances_fields/length": {
      "get": {
        "tags": [
          "instances_fields"
        ],
        "summary": "Get Instances Fields Collection Length",
        "operationId": "get_instances_fields_collection_length_instances_fields_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Instances Fields Collection Length Instances Fields Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances_fields/{rsc_id}": {
      "get": {
        "tags": [
          "instances_fields"
        ],
        "summary": "Get Instances Fields Instance",
        "description": "Get the content of the instance.\n\nConstraint:\n\n* Content can only be retrieved by participant of the instance.",
        "operationId": "get_instances_fields_instance_instances_fields__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceFieldResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "instances_fields"
        ],
        "summary": "Delete Instances Fields Resource Instance",
        "description": "Content once were created, cannot be deleted.",
        "operationId": "delete_instances_fields_resource_instance_instances_fields__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "instances_fields"
        ],
        "summary": "Patch Instances Fields Resource Instance",
        "description": "Update content.  \n        \nConstraint:\n\n* The current authenticated user must be the receiver of the content.\n\nThe request body for updating the content (instance field) must follow schema:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``value`` | string | optional | The value of the content. |\n| ``resolved`` | boolean | optional | The resolved state of the instance field, used for evaluate the ``current_state`` of instance |",
        "operationId": "patch_instances_fields_resource_instance_instances_fields__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceFieldPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceFieldResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances_fields/{rsc_id}/receiver": {
      "get": {
        "tags": [
          "instances_fields"
        ],
        "summary": "Get Instances Fields Receiver",
        "description": "Get receiver of this content.\n\nConstraint:\n\n* Only participant of this instance can use this endpoint.",
        "operationId": "get_instances_fields_receiver_instances_fields__rsc_id__receiver_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get Groups Collection",
        "description": "Get all groups in the system.",
        "operationId": "get_groups_collection_groups_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Groups Collection Groups Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Post Groups Resource",
        "description": "Create a group.\n\nConstraint:\n\n* Only admin can create group.\n\nThe request body schema for creating a group is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | required | The name of the group. |\n| ``address`` | string | optional | The address of the group |\n| ``phone`` | string | optional | The phone number of the group |\n| ``superior_group_id`` | integer | optional | The group id of the superior group |",
        "operationId": "post_groups_resource_groups_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/groups/length": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get Groups Collection Length",
        "operationId": "get_groups_collection_length_groups_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Groups Collection Length Groups Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/groups/{rsc_id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get Groups Instance",
        "description": "Get a group by id.",
        "operationId": "get_groups_instance_groups__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Delete Groups Resource Instance",
        "description": "Delete a group.\n\nConstraint:\n* Authenticated user must be the creator of this group.\n* Group has no joiners.\n* Group has no subordinate groups.",
        "operationId": "delete_groups_resource_instance_groups__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "groups"
        ],
        "summary": "Patch Groups Resource Instance",
        "description": "Update a group.\n\nConstraint:\n\n* Only creator of the group can update the group\n\nThe request body schema for updating the group is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | optional | The name of the group. |\n| ``address`` | string | optional | The address of the group |\n| ``phone`` | integer | optional | The phone number of the group |\n| ``superior_group_id`` | integer | optional | The group id of the superior group |",
        "operationId": "patch_groups_resource_instance_groups__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/groups/{rsc_id}/positions": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get Groups Positions",
        "description": "Get all positions in the group.",
        "operationId": "get_groups_positions_groups__rsc_id__positions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/groups/{rsc_id}/subordinate_groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get Groups Subordinate Groups",
        "description": "Get all subordinate the group below 1 level.",
        "operationId": "get_groups_subordinate_groups_groups__rsc_id__subordinate_groups_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/groups/{rsc_id}/roles": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get Groups Roles",
        "description": "Get all the roles in the group.",
        "operationId": "get_groups_roles_groups__rsc_id__roles_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/groups/{rsc_id}/joiners": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get Groups Joiners",
        "description": "Get all users, who joined the group.",
        "operationId": "get_groups_joiners_groups__rsc_id__joiners_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Roles Collection",
        "description": "Get all roles defined in the system.",
        "operationId": "get_roles_collection_roles_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Roles Collection Roles Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Post Roles Resource",
        "description": "Create a role.\n\nConstraint:\n\n* Only admin can create a role.\n\nThe request body for creating a role is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | required | The name of the role |\n| ``role`` |  | required | The role in the system. Enumeration of 'admin', 'handler', 'applicant' |",
        "operationId": "post_roles_resource_roles_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolePostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/roles/length": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Roles Collection Length",
        "operationId": "get_roles_collection_length_roles_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Roles Collection Length Roles Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/roles/{rsc_id}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Roles Instance",
        "description": "Get role by id.",
        "operationId": "get_roles_instance_roles__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Delete Roles Resource Instance",
        "description": "Delete a role.\n\nConstraint:\n* Only owner of the role can delete it.\n* The role without any holders can be delete.",
        "operationId": "delete_roles_resource_instance_roles__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "roles"
        ],
        "summary": "Patch Roles Resource Instance",
        "description": "Update the role.\n\nConstraint:\n\n* Only creator of the role can update it.\n\nThe request body for updating the role is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | optional | The name of the role |\n| ``role`` |  | optional | The role in the system. Enumeration of 'admin', 'handler', 'applicant' |",
        "operationId": "patch_roles_resource_instance_roles__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolePatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/roles/{rsc_id}/positions": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Roles Positions",
        "description": "Get all positions, which are derived from this role.",
        "operationId": "get_roles_positions_roles__rsc_id__positions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/roles/{rsc_id}/groups": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Roles Groups",
        "description": "Get all groups, which have this role.",
        "operationId": "get_roles_groups_roles__rsc_id__groups_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/roles/{rsc_id}/holders": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Roles Holders",
        "description": "Get all user, who held this role.",
        "operationId": "get_roles_holders_roles__rsc_id__holders_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases Collection",
        "description": "Get all phases of all forms in the system.",
        "operationId": "get_phases_collection_phases_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Phases Collection Phases Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhaseResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "phases"
        ],
        "summary": "Post Phases Resource",
        "description": "Create a phase for a form.\n\nConstraint when create a phase:\n\n* Current user must be form's owner.\n* Form must not be public or obsolete.\n\nThe request body for creating a phase is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``form_id`` | integer | required | The id of the form, which contains this phase. |\n| ``name`` | string | required | The name of the phase. |\n| ``position_id`` | integer | required | The position id, which is designated for this phase. |\n| ``phase_type`` |  | optional | The type of the phase. Enumeration of 'begin', 'transit', 'end'. Default value is 'transit' |\n| ``order`` | integer | optional | The order number, which is used to arranged the order of the phase and its section in the form its instances. |\n| ``description`` | string | optional | The phase description, which is used to give the user more information about the phase. |",
        "operationId": "post_phases_resource_phases_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhasePostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/length": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases Collection Length",
        "operationId": "get_phases_collection_length_phases_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Phases Collection Length Phases Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{rsc_id}": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases Instance",
        "description": "Get a phase by id.",
        "operationId": "get_phases_instance_phases__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "phases"
        ],
        "summary": "Delete Phases Resource Instance",
        "description": "Delete a phase.\n\nConstraint:\n\n* Only admin can delete a phase.\n* Only phase of private form can be delete. Phases of public or obsolete form cannot be deleted.",
        "operationId": "delete_phases_resource_instance_phases__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "phases"
        ],
        "summary": "Patch Phases Resource Instance",
        "description": "Update the phase.\n\nConstraint:\n\n* If form is public, positions_id and phase_type can not be changed.\n\nThe request body for updating the phase is follow\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | optional | The name of the phase. |\n| ``position_id`` | integer | optional | The position id, which is designated for this phase. |\n| ``phase_type`` |  | optional | The type of the phase. Enumeration of 'begin', 'transit', 'end'. Default value is 'transit' |\n| ``order`` | integer | optional | The order number, which is used to arranged the order of the phase and its section in the form its instances. |\n| ``description`` | string | optional | The phase description, which is used to give the user more information about the phase. |",
        "operationId": "patch_phases_resource_instance_phases__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhasePatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{rsc_id}/sections": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases Sections",
        "description": "Get all section of the phase.",
        "operationId": "get_phases_sections_phases__rsc_id__sections_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{rsc_id}/fields": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases Fields",
        "description": "Get all fields of the phase.",
        "operationId": "get_phases_fields_phases__rsc_id__fields_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{rsc_id}/from_transitions": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases From Transitions",
        "description": "Get all transitions, whose source is this phase.",
        "operationId": "get_phases_from_transitions_phases__rsc_id__from_transitions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{rsc_id}/to_transitions": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases To Transitions",
        "description": "Get all transitions, whose target is this phase.",
        "operationId": "get_phases_to_transitions_phases__rsc_id__to_transitions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{rsc_id}/next_phases": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases Next Phases",
        "description": "Get all next phases of this phase.",
        "operationId": "get_phases_next_phases_phases__rsc_id__next_phases_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{rsc_id}/prev_phases": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases Prev Phases",
        "description": "Get all previous phases of this phase.",
        "operationId": "get_phases_prev_phases_phases__rsc_id__prev_phases_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{rsc_id}/potential_directors": {
      "get": {
        "tags": [
          "phases"
        ],
        "summary": "Get Phases Potential Directors",
        "description": "Get all users, which have positions designated for this phase.",
        "operationId": "get_phases_potential_directors_phases__rsc_id__potential_directors_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/transitions": {
      "get": {
        "tags": [
          "transitions"
        ],
        "summary": "Get Transitions Collection",
        "description": "Get all transitions in the system.",
        "operationId": "get_transitions_collection_transitions_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Transitions Collection Transitions Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransitionResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "transitions"
        ],
        "summary": "Post Transitions Resource",
        "description": "Create a transition.\n\nConstraint:\n\n* 2 phases must not be the same.\n* Current user must own these 2 phases.\n* 2 phases must belong to 1 form.\n* Form must not be public or obsolete.\n* No transition existed between these 2 phases. Only 1 transition can exist between these 2 phases.\n\nThe request body schema for creating a transition is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | optional | The name of the transition. Default value is in format '<from_phase_id>to<to_phase_id>.' |\n| ``from_phase_id`` | integer | required | The id of the phase, which is the source. |\n| ``to_phase_id`` | integer | required | The id of the phase, which is the target. |\n| ``order`` | integer | optional | The order of the transition, which is used to arranged the appearance of transition in the form. |",
        "operationId": "post_transitions_resource_transitions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransitionPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransitionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/transitions/length": {
      "get": {
        "tags": [
          "transitions"
        ],
        "summary": "Get Transitions Collection Length",
        "operationId": "get_transitions_collection_length_transitions_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Transitions Collection Length Transitions Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/transitions/{rsc_id}": {
      "get": {
        "tags": [
          "transitions"
        ],
        "summary": "Get Transitions Instance",
        "description": "Get a transition by id or name.",
        "operationId": "get_transitions_instance_transitions__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransitionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "transitions"
        ],
        "summary": "Delete Transitions Resource Instance",
        "description": "Delete a transition.\n\nConstraint:\n\n* Only admin can delete transition.\n* The form contains this transition must not be public or obsolete.",
        "operationId": "delete_transitions_resource_instance_transitions__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "transitions"
        ],
        "summary": "Patch Transitions Resource Instance",
        "description": "Update the transition.\n        \nConstraint:\n\n* If form is public, can only change transition name.\n* These 2 phases must not be the same.\n* No transition existed between these 2 phases. Only 1 transition can exist between these 2 phases.\n* Current user must own these 2 phase,\n* These 2 phases must belong to 1 form\n* Form must not be obsolete.\n\nThe request body schema for updating the transition is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | optional | The name of the transition. Default value is in format '<from_phase_id>to<to_phase_id>.' |\n| ``from_phase_id`` | integer | optional | The id of the phase, which is the source. |\n| ``to_phase_id`` | integer | optional | The id of the phase, which is the target. |\n| ``order`` | integer | optional | The order of the transition, which is used to arranged the appearance of transition in the form. |",
        "operationId": "patch_transitions_resource_instance_transitions__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransitionPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransitionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/transitions/{rsc_id}/from_phase": {
      "get": {
        "tags": [
          "transitions"
        ],
        "summary": "Get Transitions From Phase",
        "description": "Get source of this transition.",
        "operationId": "get_transitions_from_phase_transitions__rsc_id__from_phase_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/transitions/{rsc_id}/to_phase": {
      "get": {
        "tags": [
          "transitions"
        ],
        "summary": "Get Transitions To Phase",
        "description": "Get the target phase of this transition.",
        "operationId": "get_transitions_to_phase_transitions__rsc_id__to_phase_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/transitions/{rsc_id}/creator": {
      "get": {
        "tags": [
          "transitions"
        ],
        "summary": "Get Transitions Creator",
        "description": "Get the creator of the transition.",
        "operationId": "get_transitions_creator_transitions__rsc_id__creator_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/transitions/{rsc_id}/form": {
      "get": {
        "tags": [
          "transitions"
        ],
        "summary": "Get Transitions Form",
        "description": "Get the form, which contains this transition.",
        "operationId": "get_transitions_form_transitions__rsc_id__form_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/positions": {
      "get": {
        "tags": [
          "positions"
        ],
        "summary": "Get Positions Collection",
        "description": "Get all positions in the system.",
        "operationId": "get_positions_collection_positions_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Positions Collection Positions Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PositionResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "positions"
        ],
        "summary": "Post Positions Resource",
        "description": "Create a position.\n\nConstraint:\n\n* Only admin can create a position.\n\nThe request schema for creating a position\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | required | The name of position. |\n| ``group_id`` | integer | optional | The id of group, which will have this position. |\n| ``role_id`` | integer | required | The id of the role, from which this position is derived from. |",
        "operationId": "post_positions_resource_positions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PositionPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/positions/length": {
      "get": {
        "tags": [
          "positions"
        ],
        "summary": "Get Positions Collection Length",
        "operationId": "get_positions_collection_length_positions_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Positions Collection Length Positions Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/positions/{rsc_id}": {
      "get": {
        "tags": [
          "positions"
        ],
        "summary": "Get Positions Instance",
        "description": "Get position by id.",
        "operationId": "get_positions_instance_positions__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "positions"
        ],
        "summary": "Delete Positions Resource Instance",
        "description": "Delete a position.\nConstraint:\n* Only creator can delete the position\n* There must not be any user, who is holding this position.",
        "operationId": "delete_positions_resource_instance_positions__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "positions"
        ],
        "summary": "Patch Positions Resource Instance",
        "description": "Update a position.\n\nConstraint:\n\n* Only creator can update the position.\n\nThe request schema for updating the position\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``name`` | string | optional | The name of position. |\n| ``group_id`` | integer | optional | The id of group, which will have this position. |\n| ``role_id`` | integer | optional | The id of the role, from which this position is derived from. |",
        "operationId": "patch_positions_resource_instance_positions__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PositionPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/positions/{rsc_id}/users_positions": {
      "get": {
        "tags": [
          "positions"
        ],
        "summary": "Get Positions Users Positions",
        "description": "Get all users positions of this position.",
        "operationId": "get_positions_users_positions_positions__rsc_id__users_positions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/positions/{rsc_id}/holders": {
      "get": {
        "tags": [
          "positions"
        ],
        "summary": "Get Positions Holders",
        "description": "Get all users, who are holding this position.",
        "operationId": "get_positions_holders_positions__rsc_id__holders_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users_positions": {
      "get": {
        "tags": [
          "users_positions"
        ],
        "summary": "Get Users Positions Collection",
        "description": "Get all user positions in the system.",
        "operationId": "get_users_positions_collection_users_positions_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Users Positions Collection Users Positions Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPositionResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "users_positions"
        ],
        "summary": "Post Users Positions Resource",
        "description": "Assign a position to another user (create users_positions record):\n\nConstraint:\n\n* Only admin can assign this position for other user.\n\nThe request body schema for creating a user position is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``user_id`` | integer | required | The id of user, who is assigned for the position. |\n| ``position_id`` | integer | required | The id of position, which is assigned the user. |",
        "operationId": "post_users_positions_resource_users_positions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPositionPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPositionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users_positions/length": {
      "get": {
        "tags": [
          "users_positions"
        ],
        "summary": "Get Users Positions Collection Length",
        "operationId": "get_users_positions_collection_length_users_positions_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Users Positions Collection Length Users Positions Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users_positions/{rsc_id}": {
      "get": {
        "tags": [
          "users_positions"
        ],
        "summary": "Get Users Positions Instance",
        "description": "Get a user positions by id.",
        "operationId": "get_users_positions_instance_users_positions__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPositionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users_positions"
        ],
        "summary": "Delete Users Positions Resource Instance",
        "description": "Delete a position from user.\n\nConstraint:\n\n* Only admin can delete a position from user.",
        "operationId": "delete_users_positions_resource_instance_users_positions__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "users_positions"
        ],
        "summary": "Patch Users Positions Resource Instance",
        "description": "Update a position to another user or update user for another position:\n\nConstraint:\n\n* Only admin can update this user position.\n\nThe request body schema for updating the user position is follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``user_id`` | integer | required | The id of user, who is assigned for the position. |\n| ``position_id`` | integer | required | The id of position, which is assigned the user. |",
        "operationId": "patch_users_positions_resource_instance_users_positions__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPositionPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPositionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/commits": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "Get Commits Collection",
        "description": "Get all commits in the system\n\nConstraint:\n\n* Only admin can retrieve all commits in the system.",
        "operationId": "get_commits_collection_commits_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Commits Collection Commits Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "commits"
        ],
        "summary": "Post Commits Resource",
        "description": "Commit cannot be created create manually.\n        It's created when user transit instance to next phase.\n        Please refer to endpoint Patch Instances Resource Instance.\n        \n\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |",
        "operationId": "post_commits_resource_commits_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/commits/length": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "Get Commits Collection Length",
        "operationId": "get_commits_collection_length_commits_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Commits Collection Length Commits Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/commits/{rsc_id}": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "Get Commits Instance",
        "description": "Get commit by hash.\n\nConstraint:\n\n* Only participants of the instance can retrieve the commit.",
        "operationId": "get_commits_instance_commits__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "commits"
        ],
        "summary": "Delete Commits Resource Instance",
        "description": "Commit cannot be deleted.",
        "operationId": "delete_commits_resource_instance_commits__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "commits"
        ],
        "summary": "Patch Commits Resource Instance",
        "description": "Commit cannot be modified cause a history cannot be modified.\n\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |",
        "operationId": "patch_commits_resource_instance_commits__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/commits/{rsc_id}/instance": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "Get Commits Instance",
        "description": "Get the instance, which the commit belongs to.\n\nConstraint:\n\n* Only participants of the instance can get this resource.",
        "operationId": "get_commits_instance_commits__rsc_id__instance_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/commits/{rsc_id}/prev_commit": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "Get Commits Prev Commit",
        "description": "Get the previous commit of the current commit.\n\nConstraint:\n\n* Only participants of the instance can get this resource.",
        "operationId": "get_commits_prev_commit_commits__rsc_id__prev_commit_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/commits/{rsc_id}/envelopes": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "Get Commits Envelopes",
        "description": "Get all evelopes of the commit.\n\nConstraint:\n\n* Only participants of the instance can get this resource.",
        "operationId": "get_commits_envelopes_commits__rsc_id__envelopes_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/receivers": {
      "get": {
        "tags": [
          "receivers"
        ],
        "summary": "Get Receivers Collection",
        "description": "Get all receivers in the system.\n\nConstraint:\n* Only admin can get all receivers in the system",
        "operationId": "get_receivers_collection_receivers_get",
        "parameters": [
          {
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "Limit number of results",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Offset from which the result is queried",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "Offset from which the result is queried",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          },
          {
            "description": "Name of attribute to sort",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "array",
              "items": {},
              "description": "Name of attribute to sort"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Receivers Collection Receivers Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReceiverResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "receivers"
        ],
        "summary": "Post Receivers Resource",
        "description": "Create a receiver for an instance.\n\nConstraint:\n* Only director of the instance can add another receiver to the instance.\n* Section must belong the the section.\n* The specified receiver must not preexist.\n* Specified user must be a potential handler for the instance.\n\nThe request body for creating a receiver is as follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``instance_id`` | integer | required | Id of the instance |\n| ``section_id`` | integer | required | Id of the section. |\n| ``user_id`` | integer | required | Id of the user, who will become a receiver for the section of the instance. |",
        "operationId": "post_receivers_resource_receivers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiverPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiverResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/receivers/length": {
      "get": {
        "tags": [
          "receivers"
        ],
        "summary": "Get Receivers Collection Length",
        "operationId": "get_receivers_collection_length_receivers_length_get",
        "parameters": [
          {
            "description": "Attribute of the resource",
            "required": false,
            "schema": {
              "title": "Attribute",
              "type": "string",
              "description": "Attribute of the resource"
            },
            "name": "attribute",
            "in": "query"
          },
          {
            "description": "Value of the attribute",
            "required": false,
            "schema": {
              "title": "Value",
              "type": "string",
              "description": "Value of the attribute"
            },
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Receivers Collection Length Receivers Length Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/receivers/{rsc_id}": {
      "get": {
        "tags": [
          "receivers"
        ],
        "summary": "Get Receivers Instance",
        "description": "Get the receiver by id.\n\nConstraint:\n* Only participants of the instance can get the receiver.",
        "operationId": "get_receivers_instance_receivers__rsc_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiverResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "receivers"
        ],
        "summary": "Delete Receivers Resource Instance",
        "description": "Receiver cannot be deleted.",
        "operationId": "delete_receivers_resource_instance_receivers__rsc_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "responses": {
          "410": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "receivers"
        ],
        "summary": "Patch Receivers Resource Instance",
        "description": "Update the receiver.\n\nConstraint:\n* Only director of current phase of the instance can update the receiver(s) of current sections of the instance.\n* Specified user must be a potential handler for the instance.\n\nThe request body for updating the receiver is as follow:\n\n| Field name | Type | Required | Description |\n| --- | --- | --- | --- |\n| ``user_id`` | integer | required | Id of the user, who will become the receiver for the section of the instance. |",
        "operationId": "patch_receivers_resource_instance_receivers__rsc_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rsc Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "rsc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiverPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiverResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{form_id}/full_form": {
      "get": {
        "summary": "Get Full Form",
        "operationId": "get_full_form_forms__form_id__full_form_get",
        "parameters": [
          {
            "description": "The id of the form",
            "required": true,
            "schema": {
              "title": "Form Id",
              "type": "integer",
              "description": "The id of the form"
            },
            "name": "form_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/forms/{form_id}/full_form_with_positions": {
      "get": {
        "summary": "Get Full Form With Positions",
        "operationId": "get_full_form_with_positions_forms__form_id__full_form_with_positions_get",
        "parameters": [
          {
            "description": "The id of the form",
            "required": true,
            "schema": {
              "title": "Form Id",
              "type": "integer",
              "description": "The id of the form"
            },
            "name": "form_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{instance_id}/full_instance": {
      "get": {
        "summary": "Get Full Instance",
        "operationId": "get_full_instance_instances__instance_id__full_instance_get",
        "parameters": [
          {
            "description": "The id of the instance",
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "integer",
              "description": "The id of the instance"
            },
            "name": "instance_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/instances/{instance_id}/full_instance_with_positions_directors_receivers": {
      "get": {
        "summary": "Get Full Instances With Positions Directors Receivers",
        "operationId": "get_full_instances_with_positions_directors_receivers_instances__instance_id__full_instance_with_positions_directors_receivers_get",
        "parameters": [
          {
            "description": "The id of the instance",
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "integer",
              "description": "The id of the instance"
            },
            "name": "instance_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/commits/{hash_commit}/full_instance": {
      "get": {
        "summary": "Get Commits Full Instance",
        "operationId": "get_commits_full_instance_commits__hash_commit__full_instance_get",
        "parameters": [
          {
            "description": "The hash of commit",
            "required": true,
            "schema": {
              "title": "Hash Commit",
              "type": "string",
              "description": "The hash of commit"
            },
            "name": "hash_commit",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Body_login_token_post": {
        "title": "Body_login_token_post",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "title": "Grant Type",
            "pattern": "password",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "scope": {
            "title": "Scope",
            "type": "string",
            "default": ""
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        }
      },
      "CommitPatchRequest": {
        "title": "CommitPatchRequest",
        "type": "object",
        "properties": {}
      },
      "CommitPostRequest": {
        "title": "CommitPostRequest",
        "type": "object",
        "properties": {}
      },
      "CommitResponse": {
        "title": "CommitResponse",
        "required": [
          "hash_commit",
          "hash_tree",
          "creator_id",
          "instance_id",
          "created_at",
          "current_phase_id",
          "message"
        ],
        "type": "object",
        "properties": {
          "hash_commit": {
            "title": "Hash Commit",
            "type": "string"
          },
          "prev_hash_commit": {
            "title": "Prev Hash Commit",
            "type": "string"
          },
          "hash_tree": {
            "title": "Hash Tree",
            "type": "string"
          },
          "creator_id": {
            "title": "Creator Id",
            "type": "integer"
          },
          "instance_id": {
            "title": "Instance Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "current_phase_id": {
            "title": "Current Phase Id",
            "type": "integer"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        }
      },
      "FieldPatchRequest": {
        "title": "FieldPatchRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the field"
          },
          "section_id": {
            "title": "Section Id",
            "type": "integer",
            "description": "The id of the section containing the field."
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "description": "The order of the field in the section."
          }
        },
        "description": "The request body for updating field is follow:"
      },
      "FieldPostRequest": {
        "title": "FieldPostRequest",
        "required": [
          "name",
          "section_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the field."
          },
          "section_id": {
            "title": "Section Id",
            "type": "integer",
            "description": "The id of the section containing the field."
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "description": "The order of the field in the section.",
            "default": 1
          }
        },
        "description": "The request body for creating field is follow:"
      },
      "FieldResponse": {
        "title": "FieldResponse",
        "required": [
          "id",
          "created_at",
          "name",
          "section_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "section_id": {
            "title": "Section Id",
            "type": "integer"
          },
          "order": {
            "title": "Order",
            "type": "integer"
          }
        }
      },
      "FormPatchRequest": {
        "title": "FormPatchRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the form."
          },
          "public": {
            "title": "Public",
            "type": "boolean",
            "description": "The public state of the form. Set to ``true`` to public the form. Only public form can be instantiated. Private form cannot be searched. Public form cannot be update or delete."
          },
          "obsolete": {
            "title": "Obsolete",
            "type": "boolean",
            "description": "The obsolete state of the form. Set to ``true`` to deprecate the form. Only public form can be deprecated. Obsolete form can be searched. Obsolete form cannot be instantiated. Obsolete form cannot be updated or deleted."
          }
        }
      },
      "FormPostRequest": {
        "title": "FormPostRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the form."
          }
        }
      },
      "FormResponse": {
        "title": "FormResponse",
        "required": [
          "id",
          "created_at",
          "name",
          "creator_id",
          "public",
          "obsolete"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "creator_id": {
            "title": "Creator Id",
            "type": "integer"
          },
          "public": {
            "title": "Public",
            "type": "boolean"
          },
          "obsolete": {
            "title": "Obsolete",
            "type": "boolean"
          }
        }
      },
      "GroupPatchRequest": {
        "title": "GroupPatchRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the group."
          },
          "address": {
            "title": "Address",
            "maxLength": 100,
            "type": "string",
            "description": "The address of the group"
          },
          "phone": {
            "title": "Phone",
            "type": "integer",
            "description": "The phone number of the group"
          },
          "superior_group_id": {
            "title": "Superior Group Id",
            "type": "integer",
            "description": "The group id of the superior group"
          }
        },
        "description": "The request body schema for updating the group is follow:"
      },
      "GroupPostRequest": {
        "title": "GroupPostRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the group."
          },
          "address": {
            "title": "Address",
            "maxLength": 100,
            "type": "string",
            "description": "The address of the group"
          },
          "phone": {
            "title": "Phone",
            "pattern": "^[0-9]{8,20}$",
            "type": "string",
            "description": "The phone number of the group"
          },
          "superior_group_id": {
            "title": "Superior Group Id",
            "type": "integer",
            "description": "The group id of the superior group"
          }
        },
        "description": "The request body schema for creating a group is follow:"
      },
      "GroupResponse": {
        "title": "GroupResponse",
        "required": [
          "id",
          "name",
          "creator_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "address": {
            "title": "Address",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "integer"
          },
          "creator_id": {
            "title": "Creator Id",
            "type": "integer"
          },
          "superior_group_id": {
            "title": "Superior Group Id",
            "type": "integer"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "InstanceFieldPatchRequest": {
        "title": "InstanceFieldPatchRequest",
        "type": "object",
        "properties": {
          "value": {
            "title": "Value",
            "type": "string",
            "description": "The value of the content."
          },
          "resolved": {
            "title": "Resolved",
            "type": "boolean",
            "description": "The resolved state of the instance field, used for evaluate the ``current_state`` of instance"
          }
        },
        "description": "The request body for updating the content (instance field) must follow schema:"
      },
      "InstanceFieldPostRequest": {
        "title": "InstanceFieldPostRequest",
        "type": "object",
        "properties": {}
      },
      "InstanceFieldResponse": {
        "title": "InstanceFieldResponse",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "instance_id",
          "field_id",
          "creator_id",
          "resolved"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "instance_id": {
            "title": "Instance Id",
            "type": "integer"
          },
          "field_id": {
            "title": "Field Id",
            "type": "integer"
          },
          "creator_id": {
            "title": "Creator Id",
            "type": "integer"
          },
          "value": {
            "title": "Value",
            "type": "string"
          },
          "resolved": {
            "title": "Resolved",
            "type": "boolean"
          }
        }
      },
      "InstancePatchRequest": {
        "title": "InstancePatchRequest",
        "type": "object",
        "properties": {
          "transit": {
            "title": "Transit",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceTransit"
              }
            ],
            "description": "Object for specified information when transit an instance. Please refer to InstanceTransit schema"
          },
          "handle": {
            "title": "Handle",
            "type": "boolean",
            "description": "Set this field to true if authenticated user is the handler(receiver) of the next phase"
          },
          "done": {
            "title": "Done",
            "type": "boolean",
            "description": "The state of the instance when it is complete handle and reach the end phase. Mark this field to true to change the state of the instance to done.The instance at state 'done' cannot be modified."
          }
        },
        "description": "Request body for updating the instance must follow schema:"
      },
      "InstancePostRequest": {
        "title": "InstancePostRequest",
        "required": [
          "form_id"
        ],
        "type": "object",
        "properties": {
          "form_id": {
            "title": "Form Id",
            "type": "integer",
            "description": "The id of the form, from which the instance is instantiated."
          }
        },
        "description": "The request body for creating an instance is follow"
      },
      "InstanceResponse": {
        "title": "InstanceResponse",
        "required": [
          "id",
          "created_at",
          "form_id",
          "creator_id",
          "done"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "form_id": {
            "title": "Form Id",
            "type": "integer"
          },
          "current_phase_id": {
            "title": "Current Phase Id",
            "type": "integer"
          },
          "creator_id": {
            "title": "Creator Id",
            "type": "integer"
          },
          "done": {
            "title": "Done",
            "type": "boolean"
          }
        }
      },
      "InstanceTransit": {
        "title": "InstanceTransit",
        "required": [
          "current_phase_id"
        ],
        "type": "object",
        "properties": {
          "current_phase_id": {
            "title": "Current Phase Id",
            "type": "integer",
            "description": "The id of next phase."
          },
          "receivers": {
            "title": "Receivers",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            },
            "description": "An object, which contains key as the id of section of next phase, value as the id of user, who is the handler(reciever) of section for the next phase. For example: {'1': 2} mean specified the section with id 1 will be handled by the user with id 2."
          },
          "director_id": {
            "title": "Director Id",
            "type": "integer",
            "description": "Id of the user, who will be director of the next phase."
          },
          "message": {
            "title": "Message",
            "type": "string",
            "description": "The message for the commit in commit history.",
            "default": ""
          }
        },
        "description": "InstanceTransit object schema:"
      },
      "PhasePatchRequest": {
        "title": "PhasePatchRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the phase."
          },
          "position_id": {
            "title": "Position Id",
            "type": "integer",
            "description": "The position id, which is designated for this phase."
          },
          "phase_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhaseTypeEnum"
              }
            ],
            "description": "The type of the phase. Enumeration of 'begin', 'transit', 'end'. Default value is 'transit'"
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "description": "The order number, which is used to arranged the order of the phase and its section in the form its instances."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The phase description, which is used to give the user more information about the phase."
          }
        },
        "description": "The request body for updating the phase is follow"
      },
      "PhasePostRequest": {
        "title": "PhasePostRequest",
        "required": [
          "form_id",
          "name",
          "position_id"
        ],
        "type": "object",
        "properties": {
          "form_id": {
            "title": "Form Id",
            "type": "integer",
            "description": "The id of the form, which contains this phase."
          },
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the phase."
          },
          "position_id": {
            "title": "Position Id",
            "type": "integer",
            "description": "The position id, which is designated for this phase."
          },
          "phase_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhaseTypeEnum"
              }
            ],
            "description": "The type of the phase. Enumeration of 'begin', 'transit', 'end'. Default value is 'transit'",
            "default": "transit"
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "description": "The order number, which is used to arranged the order of the phase and its section in the form its instances.",
            "default": 1
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The phase description, which is used to give the user more information about the phase."
          }
        },
        "description": "The request body for creating a phase is follow:"
      },
      "PhaseResponse": {
        "title": "PhaseResponse",
        "required": [
          "id",
          "created_at",
          "form_id",
          "name",
          "position_id",
          "phase_type",
          "order"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "form_id": {
            "title": "Form Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "position_id": {
            "title": "Position Id",
            "type": "integer"
          },
          "phase_type": {
            "$ref": "#/components/schemas/PhaseTypeEnum"
          },
          "order": {
            "title": "Order",
            "type": "integer"
          }
        }
      },
      "PhaseTypeEnum": {
        "title": "PhaseTypeEnum",
        "enum": [
          "begin",
          "transit",
          "end"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PositionPatchRequest": {
        "title": "PositionPatchRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of position."
          },
          "group_id": {
            "title": "Group Id",
            "type": "integer",
            "description": "The id of group, which will have this position."
          },
          "role_id": {
            "title": "Role Id",
            "type": "integer",
            "description": "The id of the role, from which this position is derived from."
          }
        },
        "description": "The request schema for updating the position"
      },
      "PositionPostRequest": {
        "title": "PositionPostRequest",
        "required": [
          "name",
          "role_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of position."
          },
          "group_id": {
            "title": "Group Id",
            "type": "integer",
            "description": "The id of group, which will have this position."
          },
          "role_id": {
            "title": "Role Id",
            "type": "integer",
            "description": "The id of the role, from which this position is derived from."
          }
        },
        "description": "The request schema for creating a position"
      },
      "PositionResponse": {
        "title": "PositionResponse",
        "required": [
          "id",
          "created_at",
          "name",
          "role_id",
          "creator_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "group_id": {
            "title": "Group Id",
            "type": "integer"
          },
          "role_id": {
            "title": "Role Id",
            "type": "integer"
          },
          "creator_id": {
            "title": "Creator Id",
            "type": "integer"
          }
        }
      },
      "ReceiverPatchRequest": {
        "title": "ReceiverPatchRequest",
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "Id of the user, who will become the receiver for the section of the instance."
          }
        },
        "description": "The request body for updating the receiver is as follow:"
      },
      "ReceiverPostRequest": {
        "title": "ReceiverPostRequest",
        "required": [
          "instance_id",
          "section_id",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "instance_id": {
            "title": "Instance Id",
            "type": "integer",
            "description": "Id of the instance"
          },
          "section_id": {
            "title": "Section Id",
            "type": "integer",
            "description": "Id of the section."
          },
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "Id of the user, who will become a receiver for the section of the instance."
          }
        },
        "description": "The request body for creating a receiver is as follow:"
      },
      "ReceiverResponse": {
        "title": "ReceiverResponse",
        "required": [
          "id",
          "created_at",
          "instance_id",
          "section_id",
          "user_id",
          "received"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "instance_id": {
            "title": "Instance Id",
            "type": "integer"
          },
          "section_id": {
            "title": "Section Id",
            "type": "integer"
          },
          "user_id": {
            "title": "User Id",
            "type": "integer"
          },
          "received": {
            "title": "Received",
            "type": "boolean"
          }
        }
      },
      "RoleEnum": {
        "title": "RoleEnum",
        "enum": [
          "admin",
          "group_admin",
          "handler",
          "applicant"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "RolePatchRequest": {
        "title": "RolePatchRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the role"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleEnum"
              }
            ],
            "description": "The role in the system. Enumeration of 'admin', 'handler', 'applicant'"
          }
        },
        "description": "The request body for updating the role is follow:"
      },
      "RolePostRequest": {
        "title": "RolePostRequest",
        "required": [
          "name",
          "role"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the role"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleEnum"
              }
            ],
            "description": "The role in the system. Enumeration of 'admin', 'handler', 'applicant'"
          }
        },
        "description": "The request body for creating a role is follow:"
      },
      "RoleResponse": {
        "title": "RoleResponse",
        "required": [
          "id",
          "created_at",
          "name",
          "role",
          "creator_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/RoleEnum"
          },
          "creator_id": {
            "title": "Creator Id",
            "type": "integer"
          }
        }
      },
      "SectionPatchRequest": {
        "title": "SectionPatchRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the section."
          },
          "phase_id": {
            "title": "Phase Id",
            "type": "integer",
            "description": "The id of the phase, which contains the section.The new phase must be in the same form of the old phase."
          },
          "position_id": {
            "title": "Position Id",
            "type": "integer",
            "description": "The id of position assigned for handling this section."
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "description": "The order of the section, which is used to arrange the order of the section in the form or instance."
          }
        },
        "description": "The request body for updating the section is follow"
      },
      "SectionPostRequest": {
        "title": "SectionPostRequest",
        "required": [
          "name",
          "phase_id",
          "position_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the section"
          },
          "phase_id": {
            "title": "Phase Id",
            "type": "integer",
            "description": "The id of the phase, which contains this section"
          },
          "position_id": {
            "title": "Position Id",
            "type": "integer",
            "description": "The id of position assigned for handling this section"
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "description": "The order of the section in the form or instance.",
            "default": 1
          }
        },
        "description": "The request body for creating a section is as follow"
      },
      "SectionResponse": {
        "title": "SectionResponse",
        "required": [
          "id",
          "name",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "phase_id": {
            "title": "Phase Id",
            "type": "integer"
          },
          "position_id": {
            "title": "Position Id",
            "type": "integer"
          },
          "order": {
            "title": "Order",
            "type": "integer"
          }
        }
      },
      "TransitionPatchRequest": {
        "title": "TransitionPatchRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the transition. Default value is in format '<from_phase_id>to<to_phase_id>.'"
          },
          "from_phase_id": {
            "title": "From Phase Id",
            "type": "integer",
            "description": "The id of the phase, which is the source."
          },
          "to_phase_id": {
            "title": "To Phase Id",
            "type": "integer",
            "description": "The id of the phase, which is the target."
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "description": "The order of the transition, which is used to arranged the appearance of transition in the form."
          }
        },
        "description": "The request body schema for updating the transition is follow:"
      },
      "TransitionPostRequest": {
        "title": "TransitionPostRequest",
        "required": [
          "from_phase_id",
          "to_phase_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the transition. Default value is in format '<from_phase_id>to<to_phase_id>.'"
          },
          "from_phase_id": {
            "title": "From Phase Id",
            "type": "integer",
            "description": "The id of the phase, which is the source."
          },
          "to_phase_id": {
            "title": "To Phase Id",
            "type": "integer",
            "description": "The id of the phase, which is the target."
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "description": "The order of the transition, which is used to arranged the appearance of transition in the form.",
            "default": 1
          }
        },
        "description": "The request body schema for creating a transition is follow:"
      },
      "TransitionResponse": {
        "title": "TransitionResponse",
        "required": [
          "id",
          "created_at",
          "from_phase_id",
          "to_phase_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "from_phase_id": {
            "title": "From Phase Id",
            "type": "integer"
          },
          "to_phase_id": {
            "title": "To Phase Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "order": {
            "title": "Order",
            "type": "integer"
          }
        }
      },
      "UserPatchRequest": {
        "title": "UserPatchRequest",
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "maxLength": 100,
            "pattern": "^[a-zA-Z\\s]{1,100}$",
            "type": "string",
            "description": "First name of the user"
          },
          "last_name": {
            "title": "Last Name",
            "maxLength": 100,
            "pattern": "^[a-zA-Z\\s]{1,100}$",
            "type": "string",
            "description": "Last name of the user"
          },
          "password": {
            "title": "Password",
            "maxLength": 100,
            "minLength": 8,
            "pattern": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,100}$",
            "type": "string",
            "description": "password used to authenticate user. password must contain at least 8 characters, at least 1 uppercase letter, 1 lower letter, 1 number and can contain special character"
          },
          "email": {
            "title": "Email",
            "pattern": "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?",
            "type": "string",
            "description": "Email of the user. Must follow email naming schema"
          },
          "phone": {
            "title": "Phone",
            "type": "integer",
            "description": "Phone number of the user"
          },
          "birthdate": {
            "title": "Birthdate",
            "type": "string",
            "description": "Birthdate of the user. Giving in format YYYY-mm-dd",
            "format": "date"
          }
        },
        "description": "Request body for updating user is as follow"
      },
      "UserPositionPatchRequest": {
        "title": "UserPositionPatchRequest",
        "required": [
          "user_id",
          "position_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "The id of user, who is assigned for the position."
          },
          "position_id": {
            "title": "Position Id",
            "type": "integer",
            "description": "The id of position, which is assigned the user."
          }
        },
        "description": "The request body schema for updating the user position is follow:"
      },
      "UserPositionPostRequest": {
        "title": "UserPositionPostRequest",
        "required": [
          "user_id",
          "position_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "The id of user, who is assigned for the position."
          },
          "position_id": {
            "title": "Position Id",
            "type": "integer",
            "description": "The id of position, which is assigned the user."
          }
        },
        "description": "The request body schema for creating a user position is follow:"
      },
      "UserPositionResponse": {
        "title": "UserPositionResponse",
        "required": [
          "id",
          "created_at",
          "creator_id",
          "user_id",
          "position_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "creator_id": {
            "title": "Creator Id",
            "type": "integer"
          },
          "user_id": {
            "title": "User Id",
            "type": "integer"
          },
          "position_id": {
            "title": "Position Id",
            "type": "integer"
          }
        }
      },
      "UserPostRequest": {
        "title": "UserPostRequest",
        "required": [
          "first_name",
          "last_name",
          "user_name",
          "password",
          "email"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "maxLength": 100,
            "pattern": "^[a-zA-Z\\s]{1,100}$",
            "type": "string",
            "description": "First name of the user"
          },
          "last_name": {
            "title": "Last Name",
            "maxLength": 100,
            "pattern": "^[a-zA-Z\\s]{1,100}$",
            "type": "string",
            "description": "Last name of the user"
          },
          "user_name": {
            "title": "User Name",
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9\\-_!@#$%^&*()?{}]{1,100}$",
            "type": "string",
            "description": "Username used to login to the system. Must contain only uppercase or lowercase letter, space, number and special character -_!@#$%^&*()?{}"
          },
          "password": {
            "title": "Password",
            "maxLength": 100,
            "minLength": 8,
            "pattern": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,100}$",
            "type": "string",
            "description": "password used to authenticate userpassword must contain at least 8 characters, at least 1 uppercase letter, 1 lower letter, 1 number and can contain special character"
          },
          "email": {
            "title": "Email",
            "pattern": "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?",
            "type": "string",
            "description": "Email of the user. Must follow email naming schema"
          },
          "phone": {
            "title": "Phone",
            "type": "integer",
            "description": "Phone number of the user"
          },
          "birthdate": {
            "title": "Birthdate",
            "type": "string",
            "description": "Birthdate of the user. Giving in format YYYY-mm-dd",
            "format": "date"
          }
        },
        "description": "The request body for creating a new user is as follow"
      },
      "UserRegistration": {
        "title": "UserRegistration",
        "required": [
          "first_name",
          "last_name",
          "user_name",
          "password",
          "email"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "maxLength": 100,
            "pattern": "^[a-zA-Z\\s]{1,100}$",
            "type": "string",
            "description": "First name of the user"
          },
          "last_name": {
            "title": "Last Name",
            "maxLength": 100,
            "pattern": "^[a-zA-Z\\s]{1,100}$",
            "type": "string",
            "description": "Last name of the user"
          },
          "user_name": {
            "title": "User Name",
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9\\-_!@#$%^&*()?{}]{1,100}$",
            "type": "string",
            "description": "Username used to login to the system. Must contain only uppercase or lowercase letter, space, number and special character -_!@#$%^&*()?{}"
          },
          "password": {
            "title": "Password",
            "maxLength": 100,
            "minLength": 8,
            "pattern": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,100}$",
            "type": "string",
            "description": "password used to authenticate userpassword must contain at least 8 characters, at least 1 uppercase letter, 1 lower letter, 1 number and can contain special character"
          },
          "email": {
            "title": "Email",
            "pattern": "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?",
            "type": "string",
            "description": "Email of the user. Must follow email naming schema"
          },
          "phone": {
            "title": "Phone",
            "type": "integer",
            "description": "Phone number of the user"
          },
          "birthdate": {
            "title": "Birthdate",
            "type": "string",
            "description": "Birthdate of the user. Giving in format YYYY-mm-dd",
            "format": "date"
          }
        },
        "description": "The request body for creating a new user is as follow"
      },
      "UserResponse": {
        "title": "UserResponse",
        "required": [
          "id",
          "user_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "user_name": {
            "title": "User Name",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "integer"
          },
          "public_key": {
            "title": "Public Key",
            "type": "string"
          },
          "birthdate": {
            "title": "Birthdate",
            "type": "string",
            "format": "date"
          },
          "disabled": {
            "title": "Disabled",
            "type": "boolean"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "token"
          }
        }
      }
    }
  }
}